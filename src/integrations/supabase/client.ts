// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('Missing Supabase environment variables');
  toast.error('Application configuration error. Please check the environment variables.');
}

// Create and export the supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: {
      getItem: (key) => {
        try {
          // Try sessionStorage as fallback if localStorage fails
          const value = localStorage.getItem(key) || sessionStorage.getItem(key);
          if (!value && key.includes('supabase.auth.token')) {
            console.log('No auth token found in storage');
          }
          return value;
        } catch (error) {
          console.error('Error accessing storage:', error);
          // Try sessionStorage as fallback
          try {
            return sessionStorage.getItem(key);
          } catch (sessionError) {
            console.error('Error accessing sessionStorage:', sessionError);
            return null;
          }
        }
      },
      setItem: (key, value) => {
        try {
          localStorage.setItem(key, value);
        } catch (error) {
          console.error('Error setting localStorage:', error);
          // Try sessionStorage as fallback
          try {
            sessionStorage.setItem(key, value);
          } catch (sessionError) {
            console.error('Error setting sessionStorage:', sessionError);
          }
        }
      },
      removeItem: (key) => {
        try {
          localStorage.removeItem(key);
          sessionStorage.removeItem(key); // Clean up both storages
        } catch (error) {
          console.error('Error removing from storage:', error);
        }
      }
    },
    detectSessionInUrl: true,
    flowType: 'pkce',
    debug: true // Enable debug mode to help troubleshoot
  },
  persistSession: true,
  // Add request timeouts
  realtime: {
    timeout: 60000
  }
});

// Log connection status on initialization
console.log('Supabase client initialized with URL:', SUPABASE_URL);

// Check connection
supabase.from('departments').select('count', { count: 'exact', head: true }).then(({ error }) => {
  if (error) {
    console.error('Supabase connection error:', error);
  } else {
    console.log('Supabase connection successful');
  }
});

// Check if user is authenticated
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Auth state changed:', event, session ? 'Session exists' : 'No session');
  if (event === 'SIGNED_OUT') {
    // Clear all storage on sign out
    try {
      localStorage.clear();
      sessionStorage.clear();
    } catch (error) {
      console.error('Error clearing storage:', error);
    }
  }
});

// Export function to check if the Supabase URL and key are configured
export const isSupabaseConfigured = () => {
  return !!(SUPABASE_URL && SUPABASE_ANON_KEY);
};

// Get current user's role
export const getCurrentUserRole = async (): Promise<string | null> => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return null;

    const { data: profile, error } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (error) {
      console.error('Error fetching user role:', error);
      return null;
    }

    return profile?.role || null;
  } catch (error) {
    console.error('Error in getCurrentUserRole:', error);
    return null;
  }
};

// Check if current user is an administrator
export const isUserAdmin = async (): Promise<boolean> => {
  const role = await getCurrentUserRole();
  return role === 'administrator';
};
