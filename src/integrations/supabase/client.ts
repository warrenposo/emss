// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('Missing Supabase environment variables');
  toast.error('Application configuration error. Please check the environment variables.');
}

// Create and export the supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage,
    detectSessionInUrl: false // Disable session detection in URL to prevent navigation issues
  }
});

// Log connection status on initialization
console.log('Supabase client initialized with URL:', SUPABASE_URL);

// Check connection
supabase.from('departments').select('count', { count: 'exact', head: true }).then(({ error }) => {
  if (error) {
    console.error('Supabase connection error:', error);
  } else {
    console.log('Supabase connection successful');
  }
});

// Check if user is authenticated
supabase.auth.onAuthStateChange(async (event, session) => {
  console.log('Auth state changed:', event);
  if (session?.user) {
    console.log('User authenticated:', session.user.email);
    
    try {
      // First check if the user profile exists
      const { data: profile, error: profileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', session.user.id)
        .maybeSingle();
        
      if (profileError) {
        console.error('Error checking user profile:', profileError);
      }
      
      // If profile doesn't exist, create one
      if (!profile) {
        console.log('Creating new profile for user:', session.user.id);
        const { error: insertError } = await supabase
          .from('user_profiles')
          .insert({
            id: session.user.id,
            first_name: session.user.user_metadata?.first_name || 'User',
            last_name: session.user.user_metadata?.last_name || '',
            role: 'administrator', // Default to administrator role
            last_login: new Date().toISOString()
          });
          
        if (insertError) {
          console.error('Error creating user profile:', insertError);
        } else {
          console.log('Created user profile successfully');
        }
      } else {
        // Update last login
        const { error: updateError } = await supabase
          .from('user_profiles')
          .update({ last_login: new Date().toISOString() })
          .eq('id', session.user.id);
          
        if (updateError) {
          console.error('Error updating last login:', updateError);
        }
      }
    } catch (err) {
      console.error('Error in auth state change handler:', err);
    }
  }
});

// Export function to check if the Supabase URL and key are configured
export const isSupabaseConfigured = () => {
  return !!(SUPABASE_URL && SUPABASE_ANON_KEY);
};

// Get current user's role
export const getCurrentUserRole = async (): Promise<string | null> => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return null;

    const { data: profile, error } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (error) {
      console.error('Error fetching user role:', error);
      return null;
    }

    return profile?.role || null;
  } catch (error) {
    console.error('Error in getCurrentUserRole:', error);
    return null;
  }
};

// Check if current user is an administrator
export const isUserAdmin = async (): Promise<boolean> => {
  const role = await getCurrentUserRole();
  return role === 'administrator';
};
