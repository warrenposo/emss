
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://lizkalsahbpmznkajjyr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxpemthbHNhaGJwbXpua2FqanlyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI1NDA5NTcsImV4cCI6MjA1ODExNjk1N30.iv9rCs5qcaufM6hEPEl5QalcsvIu5sBHAr5YfGzD1KI";

// Create and export the supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage
  }
});

// Log connection status on initialization
console.log('Supabase client initialized with URL:', SUPABASE_URL);

// Check connection
supabase.from('departments').select('count', { count: 'exact', head: true }).then(({ error }) => {
  if (error) {
    console.error('Supabase connection error:', error);
  } else {
    console.log('Supabase connection successful');
  }
});

// Check if user is authenticated
supabase.auth.onAuthStateChange(async (event, session) => {
  console.log('Auth state changed:', event);
  if (session?.user) {
    console.log('User authenticated:', session.user.email);
    // Update the last_login field in user_profiles
    
    try {
      // First check if the user profile exists
      const { data: profile, error: profileError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', session.user.id)
        .maybeSingle();
        
      if (profileError) {
        console.error('Error checking user profile:', profileError);
      }
      
      // If profile doesn't exist, create one with admin role
      if (!profile) {
        console.log('Creating new admin profile for user:', session.user.id);
        const { error: insertError } = await supabase
          .from('user_profiles')
          .insert({
            id: session.user.id,
            first_name: session.user.user_metadata?.first_name || 'User',
            last_name: session.user.user_metadata?.last_name || '',
            role: 'administrator', // Default to administrator
            last_login: new Date().toISOString()
          });
          
        if (insertError) {
          console.error('Error creating user profile:', insertError);
        } else {
          console.log('Created admin profile successfully');
        }
      } else {
        // Update last login
        const { error: updateError } = await supabase
          .from('user_profiles')
          .update({ last_login: new Date().toISOString() })
          .eq('id', session.user.id);
          
        if (updateError) {
          console.error('Error updating last login:', updateError);
        }
        
        // Log the current role
        console.log('Current user role:', profile.role);
      }
    } catch (err) {
      console.error('Error in auth state change handler:', err);
    }
  }
});

// Export function to check if the Supabase URL and key are configured
export const isSupabaseConfigured = () => {
  return !!(SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY);
};

// Get the current user role
export const getCurrentUserRole = async () => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.log('No authenticated user found');
      return null;
    }
    
    console.log('Getting role for user:', user.id);
    
    // First try to get the role directly from the user_profiles table
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .maybeSingle();
      
    if (profileError) {
      console.error('Error fetching user role:', profileError);
      
      // If the profile doesn't exist, create one with administrator role
      if (profileError.message.includes('contains 0 rows')) {
        console.log('Profile not found, creating admin profile');
        const { error: insertError } = await supabase
          .from('user_profiles')
          .insert({
            id: user.id,
            first_name: user.user_metadata?.first_name || 'User',
            last_name: user.user_metadata?.last_name || '',
            role: 'administrator'
          });
          
        if (insertError) {
          console.error('Error creating user profile:', insertError);
          return null;
        }
        
        return 'administrator';
      }
      return null;
    }
      
    console.log('User role from database:', profile?.role);
    return profile?.role || null;
  } catch (error) {
    console.error('Error in getCurrentUserRole:', error);
    return null;
  }
};

// Check if the current user is an administrator
export const isUserAdmin = async () => {
  try {
    const role = await getCurrentUserRole();
    console.log('Checking if user is admin, role:', role);
    
    if (role === 'administrator') {
      return true;
    }
    
    // If not admin, attempt to promote to admin if the user is the first user
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      // Check if this is potentially the first user in the system
      const { count, error: countError } = await supabase
        .from('user_profiles')
        .select('*', { count: 'exact', head: true });
        
      if (!countError && count !== null && count <= 1) {
        console.log('This appears to be the first user, promoting to admin');
        const { error: updateError } = await supabase
          .from('user_profiles')
          .update({ role: 'administrator' })
          .eq('id', user.id);
          
        if (!updateError) {
          console.log('Successfully promoted user to admin');
          return true;
        }
      }
    }
    
    return false;
  } catch (error) {
    console.error('Error in isUserAdmin:', error);
    return false;
  }
};

// Function to ensure the current user has an admin profile
export const ensureAdminProfile = async () => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.log('No authenticated user found');
      return false;
    }
    
    // Check for existing profile
    const { data: profile } = await supabase
      .from('user_profiles')
      .select('role, first_name, last_name')
      .eq('id', user.id)
      .maybeSingle();
      
    // If profile exists and is already admin, return true
    if (profile && profile.role === 'administrator') {
      return true;
    }
    
    // Create or update profile to admin role
    const { error } = await supabase
      .from('user_profiles')
      .upsert({
        id: user.id,
        role: 'administrator',
        first_name: user.user_metadata?.first_name || (profile?.first_name || 'Admin'),
        last_name: user.user_metadata?.last_name || (profile?.last_name || 'User')
      });
      
    if (error) {
      console.error('Error ensuring admin profile:', error);
      toast.error('Failed to set admin privileges: ' + error.message);
      return false;
    }
    
    console.log('Successfully ensured admin profile for user');
    toast.success('Administrator privileges have been granted');
    return true;
  } catch (error) {
    console.error('Error in ensureAdminProfile:', error);
    return false;
  }
};
