VITE_SUPABASE_URL=https://lizkalsahbpmznkajjyr.supabase.co
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxpemthbHNhaGJwbXpua2FqanlyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI1NDA5NTcsImV4cCI6MjA1ODExNjk1N30.iv9rCs5qcaufM6hEP
PORT=3005
NODE_ENV=development
VITE_SUPABASE_SITE_URL=http://localhost:8080
VITE_SUPABASE_REDIRECT_URL=http://localhost:8080/dashboard
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';

export const useAuth = () => {
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        setUser(session?.user || null);
      } catch (error) {
        console.error('Error checking authentication:', error);
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    checkAuth();

    // Listen for auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (event, session) => {
        setUser(session?.user || null);
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  return { user, loading };
};

import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { useAuth } from "@/hooks/use-auth";
import LoginPage from "./components/auth/LoginPage";
import RegisterPage from "./components/auth/RegisterPage";
import AppLayout from "./components/layout/AppLayout";
import Dashboard from "./components/dashboard/Dashboard";
import EmployeePage from "./pages/EmployeePage";
import DevicesPage from "./pages/DevicesPage";
import AttendancePage from "./pages/AttendancePage";
import SystemPage from "./pages/SystemPage";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

// Protected route component
const ProtectedRoute = ({ children }: { children: React.ReactNode }) => {
  const { user } = useAuth();
  
  if (!user) {
    return <Navigate to="/login" replace />;
  }
  
  return <>{children}</>;
};

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <Routes>
          {/* Public routes */}
          <Route path="/login" element={<LoginPage />} />
          <Route path="/register" element={<RegisterPage />} />
          
          {/* Protected routes */}
          <Route
            path="/"
            element={
              <ProtectedRoute>
                <AppLayout />
              </ProtectedRoute>
            }
          >
            <Route index element={<Dashboard />} />
            <Route path="/employees" element={<EmployeePage />} />
            <Route path="/employees/holidays" element={<EmployeePage />} />
            <Route path="/employees/departments" element={<EmployeePage />} />
            <Route path="/employees/areas" element={<EmployeePage />} />
            <Route path="/employees/positions" element={<EmployeePage />} />
            <Route path="/employees/timetables" element={<EmployeePage />} />
            <Route path="/employees/shifts" element={<EmployeePage />} />
            <Route path="/employees/department-schedules" element={<EmployeePage />} />
            <Route path="/employees/employee-schedules" element={<EmployeePage />} />
            <Route path="/employees/temporary-schedules" element={<EmployeePage />} />
            <Route path="/employees/leaves" element={<EmployeePage />} />
            <Route path="/devices" element={<DevicesPage />} />
            <Route path="/devices/fence-devices" element={<DevicesPage />} />
            <Route path="/devices/fence-employees" element={<DevicesPage />} />
            <Route path="/devices/fence-departments" element={<DevicesPage />} />
            <Route path="/attendance" element={<AttendancePage />} />
            <Route path="/system" element={<SystemPage />} />
          </Route>
          
          {/* Catch all route for 404 */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </BrowserRouter>
    </TooltipProvider>
  </QueryClientProvider>
);

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';

const LoginPage = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      if (error) throw error;

      // Redirect to dashboard after successful login
      navigate('/dashboard');
    } catch (error) {
      console.error('Login error:', error);
      // Add your error handling here
    } finally {
      setLoading(false);
    }
  };

  return (
    // Your existing login form JSX
  );
};